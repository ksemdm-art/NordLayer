"""
Test script for order process functionality.
"""
import asyncio
import sys
import os

# Add the telegram-bot directory to the path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from session_manager import SessionManager, OrderStep, OrderSession
from order_handlers import OrderHandlers
from api_client import APIClient


async def test_session_management():
    """Test session management functionality"""
    print("Testing session management...")
    
    session_manager = SessionManager()
    
    # Test session creation
    user_id = 12345
    session = session_manager.create_session(user_id)
    assert session.user_id == user_id
    assert session.step == OrderStep.START
    print("‚úÖ Session creation works")
    
    # Test session updates
    session_manager.update_session(user_id, customer_name="Test User", customer_email="test@example.com")
    updated_session = session_manager.get_session(user_id)
    assert updated_session.customer_name == "Test User"
    assert updated_session.customer_email == "test@example.com"
    print("‚úÖ Session updates work")
    
    # Test session validation
    session.service_id = 1
    session.files = [{"filename": "test.stl", "size": 1024}]
    assert session.is_complete() == True
    print("‚úÖ Session validation works")
    
    # Test order data conversion
    order_data = session.to_order_data()
    assert order_data["customer_name"] == "Test User"
    assert order_data["customer_email"] == "test@example.com"
    assert order_data["service_id"] == 1
    assert order_data["source"] == "TELEGRAM"
    print("‚úÖ Order data conversion works")
    
    # Test session cleanup
    session_manager.clear_session(user_id)
    assert session_manager.get_session(user_id) is None
    print("‚úÖ Session cleanup works")
    
    print("‚úÖ All session management tests passed!")


def test_validation_functions():
    """Test validation functions in OrderHandlers"""
    print("\nTesting validation functions...")
    
    try:
        # Create a mock API client and session manager
        api_client = APIClient("http://localhost:8000")
        session_manager = SessionManager()
        order_handlers = OrderHandlers(api_client, session_manager)
        
        # Test name validation
        print(f"Testing 'John Doe': {order_handlers._validate_name('John Doe')}")
        print(f"Testing '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤': {order_handlers._validate_name('–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤')}")
        print(f"Testing 'J': {order_handlers._validate_name('J')}")
        print(f"Testing '': {order_handlers._validate_name('')}")
        print(f"Testing 'John123': {order_handlers._validate_name('John123')}")
        
        assert order_handlers._validate_name("John Doe") == True
        assert order_handlers._validate_name("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤") == True
        assert order_handlers._validate_name("J") == False  # Too short
        assert order_handlers._validate_name("") == False  # Empty
        assert order_handlers._validate_name("John123") == False  # Contains numbers
        print("‚úÖ Name validation works")
        
        # Test email validation
        assert order_handlers._validate_email("test@example.com") == True
        assert order_handlers._validate_email("user.name+tag@domain.co.uk") == True
        assert order_handlers._validate_email("invalid-email") == False
        assert order_handlers._validate_email("@domain.com") == False
        assert order_handlers._validate_email("user@") == False
        print("‚úÖ Email validation works")
        
        # Test phone validation
        assert order_handlers._validate_phone("+7 900 123-45-67") == True
        assert order_handlers._validate_phone("+1234567890") == True
        assert order_handlers._validate_phone("") == True  # Optional field
        assert order_handlers._validate_phone("123") == False  # Too short
        assert order_handlers._validate_phone("abc") == False  # Not a number
        print("‚úÖ Phone validation works")
        
        print("‚úÖ All validation tests passed!")
    except Exception as e:
        import traceback
        print(f"‚ùå Validation test failed: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        raise


def test_order_step_flow():
    """Test the order step flow logic"""
    print("\nTesting order step flow...")
    
    session_manager = SessionManager()
    user_id = 12345
    
    # Create session and test step progression
    session = session_manager.create_session(user_id)
    
    # Test step progression
    steps = [
        OrderStep.START,
        OrderStep.SERVICE_SELECTION,
        OrderStep.CONTACT_INFO,
        OrderStep.FILE_UPLOAD,
        OrderStep.SPECIFICATIONS,
        OrderStep.DELIVERY,
        OrderStep.CONFIRMATION,
        OrderStep.COMPLETED
    ]
    
    for step in steps:
        session.step = step
        assert session.step == step
        print(f"‚úÖ Step {step.value} set correctly")
    
    # Test complete order data
    session.customer_name = "Test User"
    session.customer_email = "test@example.com"
    session.customer_phone = "+1234567890"
    session.service_id = 1
    session.service_name = "FDM Printing"
    session.files = [{"filename": "model.stl", "size": 2048}]
    session.specifications = {
        "material": "pla",
        "quality": "standard",
        "infill": "30"
    }
    session.delivery_needed = False
    
    assert session.is_complete() == True
    print("‚úÖ Complete order validation works")
    
    # Test order summary
    summary = session.get_summary()
    assert "Test User" in summary
    assert "test@example.com" in summary
    assert "FDM Printing" in summary
    assert "–°–∞–º–æ–≤—ã–≤–æ–∑" in summary
    print("‚úÖ Order summary generation works")
    
    print("‚úÖ All order step flow tests passed!")


async def main():
    """Run all tests"""
    print("üß™ Starting order process tests...\n")
    
    try:
        await test_session_management()
        test_validation_functions()
        test_order_step_flow()
        
        print("\nüéâ All tests passed successfully!")
        print("\nüìã Order process implementation summary:")
        print("‚úÖ State machine with OrderStep enum implemented")
        print("‚úÖ Contact information collection with validation")
        print("‚úÖ File upload handling with format and size checks")
        print("‚úÖ Printing specifications selection via inline keyboards")
        print("‚úÖ Optional delivery address collection")
        print("‚úÖ Order confirmation with full summary")
        print("‚úÖ Navigation between steps for editing")
        print("‚úÖ Session management and cleanup")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())