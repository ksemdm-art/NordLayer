"""
Order processing handlers for the Telegram bot.
Implements step-by-step order creation with state management.
"""
import logging
import re
from typing import Optional, List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from session_manager import SessionManager, OrderSession, OrderStep
from api_client import APIClient, APIClientError
from error_handler import BotErrorHandler
from notification_service import NotificationService

logger = logging.getLogger(__name__)


class OrderHandlers:
    """Handlers for order processing workflow"""
    
    def __init__(self, api_client: APIClient, session_manager: SessionManager, notification_service: Optional[NotificationService] = None):
        self.api_client = api_client
        self.session_manager = session_manager
        self.notification_service = notification_service
    
    async def start_order_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start the order process by showing service selection"""
        user_id = update.effective_user.id
        BotErrorHandler.log_user_action(user_id, "start_order_process")
        
        try:
            # Create or reset session
            session = self.session_manager.create_session(user_id)
            session.step = OrderStep.SERVICE_SELECTION
            
            await self.show_service_selection(update, context)
            
        except Exception as e:
            await BotErrorHandler.handle_api_error(update, context, e, "starting order process")
    
    async def show_service_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show available services for selection"""
        user_id = update.effective_user.id
        
        try:
            # Fetch services from API
            services = await self.api_client.get_services(active_only=True)
            
            if not services:
                message = (
                    "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                await self._send_or_edit_message(update, message)
                return
            
            # Build message
            message_lines = [
                "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–∫–∞–∑–∞:",
                "",
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:"
            ]
            
            # Build keyboard with services
            keyboard = []
            for service in services:
                service_id = service.get('id')
                service_name = service.get('name', '–£—Å–ª—É–≥–∞')
                if service_id:
                    # Truncate button text if too long
                    button_text = service_name if len(service_name) <= 30 else service_name[:27] + "..."
                    keyboard.append([InlineKeyboardButton(
                        f"üõçÔ∏è {button_text}", 
                        callback_data=f"order_select_service_{service_id}"
                    )])
            
            # Add cancel button
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")])
            
            message = "\n".join(message_lines)
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self._send_or_edit_message(update, message, reply_markup)
            
        except APIClientError as e:
            await BotErrorHandler.handle_api_error(update, context, e, "fetching services for order")
        except Exception as e:
            logger.error(f"Unexpected error showing service selection: {e}")
            await BotErrorHandler.handle_api_error(update, context, e, "showing service selection")
    
    async def handle_service_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, service_id: int):
        """Handle service selection and move to contact info"""
        user_id = update.effective_user.id
        BotErrorHandler.log_user_action(user_id, "order_service_selection", f"service_id: {service_id}")
        
        try:
            session = self.session_manager.get_session(user_id)
            if not session:
                await BotErrorHandler.handle_session_error(update, context, "session_not_found")
                return
            
            # Fetch service details
            services = await self.api_client.get_services(active_only=True)
            selected_service = next((s for s in services if s.get('id') == service_id), None)
            
            if not selected_service:
                await update.callback_query.message.reply_text(
                    "‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É."
                )
                return
            
            # Update session
            session.service_id = service_id
            session.service_name = selected_service.get('name', '–£—Å–ª—É–≥–∞')
            session.step = OrderStep.CONTACT_INFO
            
            # Show contact info collection
            await self.show_contact_info_collection(update, context)
            
        except APIClientError as e:
            await BotErrorHandler.handle_api_error(update, context, e, "selecting service")
        except Exception as e:
            logger.error(f"Unexpected error handling service selection: {e}")
            await BotErrorHandler.handle_api_error(update, context, e, "handling service selection")
    
    async def show_contact_info_collection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show contact information collection step"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session:
            await BotErrorHandler.handle_session_error(update, context, "session_not_found")
            return
        
        message = (
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞: **{session.service_name}**\n\n"
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–ø–æ–ª–Ω–æ–µ –∏–º—è**:"
        )
        
        # Build keyboard with navigation
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="order_back_to_services")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def handle_contact_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, name: str):
        """Handle customer name input"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.CONTACT_INFO:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        # Validate name
        if not self._validate_name(name):
            await BotErrorHandler.handle_validation_error(update, context, "name")
            return
        
        # Save name and ask for email
        session.customer_name = name.strip()
        
        message = (
            f"‚úÖ –ò–º—è: **{session.customer_name}**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à **email –∞–¥—Ä–µ—Å**:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="order_edit_name")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_contact_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE, email: str):
        """Handle customer email input"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.CONTACT_INFO:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        # Validate email
        if not self._validate_email(email):
            await BotErrorHandler.handle_validation_error(update, context, "email")
            return
        
        # Save email and ask for phone
        session.customer_email = email.strip().lower()
        
        message = (
            f"‚úÖ Email: **{session.customer_email}**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞** (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
            "–§–æ—Ä–º–∞—Ç: +7 900 123-45-67 –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="order_skip_phone")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="order_edit_email")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_contact_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE, phone: str):
        """Handle customer phone input"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.CONTACT_INFO:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        # Validate phone if provided
        if phone and not self._validate_phone(phone):
            await BotErrorHandler.handle_validation_error(update, context, "phone")
            return
        
        # Save phone and move to file upload
        session.customer_phone = phone.strip() if phone else None
        session.step = OrderStep.FILE_UPLOAD
        
        await self.show_file_upload_step(update, context)
    
    async def skip_phone_step(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Skip phone input and move to file upload"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.CONTACT_INFO:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        session.customer_phone = None
        session.step = OrderStep.FILE_UPLOAD
        
        await self.show_file_upload_step(update, context)
    
    async def show_file_upload_step(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show file upload step"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session:
            await BotErrorHandler.handle_session_error(update, context, "session_not_found")
            return
        
        # Show contact summary
        contact_summary = [
            "üìã –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
            f"üë§ –ò–º—è: {session.customer_name}",
            f"üìß Email: {session.customer_email}"
        ]
        
        if session.customer_phone:
            contact_summary.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {session.customer_phone}")
        
        uploaded_files_info = ""
        if session.files:
            uploaded_files_info = f"\n\nüìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(session.files)}"
            for i, file_info in enumerate(session.files, 1):
                uploaded_files_info += f"\n{i}. {file_info.get('filename', '–§–∞–π–ª')}"
        
        message = (
            "\n".join(contact_summary) + 
            "\n\nüìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤–∞—à–∏—Ö 3D –º–æ–¥–µ–ª–µ–π.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: **.stl**, **.obj**, **.3mf**\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: **50MB**" +
            uploaded_files_info +
            "\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤."
        )
        
        # Build keyboard
        keyboard = []
        
        if session.files:
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏", callback_data="order_continue_with_files")])
        
        keyboard.extend([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="order_back_to_contacts")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def handle_file_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle file upload from user"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.FILE_UPLOAD:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        file = update.message.document
        if not file:
            await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            return
        
        # Validate file
        if not file.file_name:
            await BotErrorHandler.handle_file_error(update, context, "file_not_found")
            return
        
        filename_lower = file.file_name.lower()
        supported_formats = ('.stl', '.obj', '.3mf')
        
        if not filename_lower.endswith(supported_formats):
            await BotErrorHandler.handle_file_error(update, context, "invalid_format", file.file_name)
            return
        
        # Check file size (50MB limit)
        if file.file_size and file.file_size > 50 * 1024 * 1024:
            await BotErrorHandler.handle_file_error(update, context, "file_too_large", file.file_name)
            return
        
        try:
            # Download file from Telegram
            file_obj = await context.bot.get_file(file.file_id)
            file_data = await file_obj.download_as_bytearray()
            
            # Upload to API
            upload_result = await self.api_client.upload_file(
                file_data=bytes(file_data),
                filename=file.file_name,
                content_type=file.mime_type
            )
            
            # Save file info to session
            file_info = {
                "filename": file.file_name,
                "size": file.file_size,
                "telegram_file_id": file.file_id,
                "upload_result": upload_result
            }
            session.files.append(file_info)
            
            # Confirm upload
            message = (
                f"‚úÖ –§–∞–π–ª **{file.file_name}** —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n"
                f"üìè –†–∞–∑–º–µ—Ä: {file.file_size / 1024:.1f} KB\n\n"
                f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(session.files)}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="order_continue_with_files")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª", callback_data="order_remove_last_file")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            
        except APIClientError as e:
            await BotErrorHandler.handle_api_error(update, context, e, "uploading file")
        except Exception as e:
            logger.error(f"Unexpected error uploading file: {e}")
            await BotErrorHandler.handle_file_error(update, context, "upload_failed", file.file_name)
    
    async def continue_with_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Continue to specifications step after file upload"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or not session.files:
            await update.callback_query.message.reply_text(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            )
            return
        
        session.step = OrderStep.SPECIFICATIONS
        await self.show_specifications_step(update, context)
    
    async def show_specifications_step(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show printing specifications selection"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session:
            await BotErrorHandler.handle_session_error(update, context, "session_not_found")
            return
        
        message = (
            "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∞—Ç–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–µ—á–∞—Ç–∏:"
        )
        
        # Material selection keyboard
        keyboard = [
            [InlineKeyboardButton("üî¥ PLA (–±–∞–∑–æ–≤—ã–π)", callback_data="order_spec_material_pla")],
            [InlineKeyboardButton("üü° PETG (–ø—Ä–æ—á–Ω—ã–π)", callback_data="order_spec_material_petg")],
            [InlineKeyboardButton("‚ö´ ABS (—Ç–µ—Ä–º–æ—Å—Ç–æ–π–∫–∏–π)", callback_data="order_spec_material_abs")],
            [InlineKeyboardButton("üîµ TPU (–≥–∏–±–∫–∏–π)", callback_data="order_spec_material_tpu")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∞–π–ª–∞–º", callback_data="order_back_to_files")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def handle_material_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, material: str):
        """Handle material selection"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.SPECIFICATIONS:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        # Save material
        session.specifications["material"] = material
        
        # Show quality selection
        material_names = {
            "pla": "PLA (–±–∞–∑–æ–≤—ã–π)",
            "petg": "PETG (–ø—Ä–æ—á–Ω—ã–π)", 
            "abs": "ABS (—Ç–µ—Ä–º–æ—Å—Ç–æ–π–∫–∏–π)",
            "tpu": "TPU (–≥–∏–±–∫–∏–π)"
        }
        
        message = (
            f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª: **{material_names.get(material, material)}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üü¢ –ß–µ—Ä–Ω–æ–≤–æ–µ (0.3–º–º, –±—ã—Å—Ç—Ä–æ)", callback_data="order_spec_quality_draft")],
            [InlineKeyboardButton("üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (0.2–º–º)", callback_data="order_spec_quality_standard")],
            [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–æ–µ (0.1–º–º, –º–µ–¥–ª–µ–Ω–Ω–æ)", callback_data="order_spec_quality_high")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="order_back_to_material")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def handle_quality_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, quality: str):
        """Handle quality selection"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.SPECIFICATIONS:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        # Save quality
        session.specifications["quality"] = quality
        
        # Show infill selection
        quality_names = {
            "draft": "–ß–µ—Ä–Ω–æ–≤–æ–µ (0.3–º–º)",
            "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (0.2–º–º)",
            "high": "–í—ã—Å–æ–∫–æ–µ (0.1–º–º)"
        }
        
        message = (
            f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: **{quality_names.get(quality, quality)}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üì¶ 15% (–ª–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å)", callback_data="order_spec_infill_15")],
            [InlineKeyboardButton("üì¶ 30% (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)", callback_data="order_spec_infill_30")],
            [InlineKeyboardButton("üì¶ 50% (–ø—Ä–æ—á–Ω–∞—è)", callback_data="order_spec_infill_50")],
            [InlineKeyboardButton("üì¶ 100% (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å)", callback_data="order_spec_infill_100")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="order_back_to_quality")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def handle_infill_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, infill: str):
        """Handle infill selection and move to delivery"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.SPECIFICATIONS:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        # Save infill
        session.specifications["infill"] = infill
        session.step = OrderStep.DELIVERY
        
        await self.show_delivery_step(update, context)
    
    async def show_delivery_step(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show delivery options"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session:
            await BotErrorHandler.handle_session_error(update, context, "session_not_found")
            return
        
        # Show specifications summary
        specs_summary = []
        if session.specifications.get("material"):
            material_names = {"pla": "PLA", "petg": "PETG", "abs": "ABS", "tpu": "TPU"}
            specs_summary.append(f"üîπ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material_names.get(session.specifications['material'], session.specifications['material'])}")
        
        if session.specifications.get("quality"):
            quality_names = {"draft": "–ß–µ—Ä–Ω–æ–≤–æ–µ", "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", "high": "–í—ã—Å–æ–∫–æ–µ"}
            specs_summary.append(f"üîπ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_names.get(session.specifications['quality'], session.specifications['quality'])}")
        
        if session.specifications.get("infill"):
            specs_summary.append(f"üîπ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {session.specifications['infill']}%")
        
        message = (
            "üöö –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n"
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∞—Ç–∏:\n" + "\n".join(specs_summary) + "\n\n"
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üè™ –°–∞–º–æ–≤—ã–≤–æ–∑ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="order_delivery_pickup")],
            [InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="order_delivery_shipping")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="order_back_to_specs")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def handle_delivery_pickup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle pickup selection"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.DELIVERY:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        session.delivery_needed = False
        session.delivery_details = None
        session.step = OrderStep.CONFIRMATION
        
        await self.show_confirmation_step(update, context)
    
    async def handle_delivery_shipping(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle shipping selection"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.DELIVERY:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        session.delivery_needed = True
        
        message = (
            "üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±—É –ø–æ–ª—É—á–µ–Ω–∏—è", callback_data="order_back_to_delivery")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def handle_delivery_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE, address: str):
        """Handle delivery address input"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.DELIVERY:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        # Validate address (basic check)
        if len(address.strip()) < 10:
            await update.message.reply_text(
                "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
            )
            return
        
        session.delivery_details = address.strip()
        session.step = OrderStep.CONFIRMATION
        
        await self.show_confirmation_step(update, context)
    
    async def show_confirmation_step(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show order confirmation with full summary"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session:
            await BotErrorHandler.handle_session_error(update, context, "session_not_found")
            return
        
        # Get full order summary
        summary = session.get_summary()
        
        message = (
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n" +
            summary + "\n\n" +
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_confirm")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="order_edit_menu")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def show_edit_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show edit menu for order modification"""
        message = (
            "‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="order_edit_contacts")],
            [InlineKeyboardButton("üìÅ –§–∞–π–ª—ã", callback_data="order_edit_files")],
            [InlineKeyboardButton("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∞—Ç–∏", callback_data="order_edit_specs")],
            [InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="order_edit_delivery")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é", callback_data="order_back_to_confirmation")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def confirm_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Confirm and create the order"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or session.step != OrderStep.CONFIRMATION:
            await BotErrorHandler.handle_session_error(update, context, "invalid_step")
            return
        
        # Validate order data before sending
        validation_error = self._validate_order_data(session)
        if validation_error:
            await BotErrorHandler.handle_validation_error(
                update, context, "order_data", validation_error
            )
            return
        
        if not session.is_complete():
            await update.callback_query.message.reply_text(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è."
            )
            return
        
        try:
            # Show processing message
            processing_message = await update.callback_query.message.reply_text(
                "‚è≥ –°–æ–∑–¥–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            
            # Create order via API
            order_data = session.to_order_data()
            logger.info(f"Creating order for user {user_id} with data: {order_data}")
            
            created_order = await self.api_client.create_order(order_data)
            
            # Extract order data from API response
            if isinstance(created_order, dict) and created_order.get('success'):
                order_info = created_order.get('data', {})
            else:
                order_info = created_order
            
            order_id = order_info.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            
            # Log successful order creation for analytics
            BotErrorHandler.log_system_event(
                "order_created", 
                f"user_id: {user_id}, order_id: {order_id}, service_id: {session.service_id}"
            )
            
            # Mark session as completed
            session.step = OrderStep.COMPLETED
            
            # Delete processing message
            try:
                await processing_message.delete()
            except Exception:
                pass  # Ignore if message can't be deleted
            
            # Success message with order details
            message = (
                "üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: **#{order_id}**\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {session.customer_name}\n"
                f"üìß Email: {session.customer_email}\n"
                f"üõçÔ∏è –£—Å–ª—É–≥–∞: {session.service_name}\n"
                f"üìÅ –§–∞–π–ª–æ–≤: {len(session.files)}\n\n"
                "‚úÖ **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n"
                "1. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
                "2. –°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n"
                "3. –°–æ–æ–±—â–∏–º —Ç–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å\n\n"
                "üìß –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email\n"
                "üîî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
            )
            
            keyboard = [
                [InlineKeyboardButton("üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="track_order")],
                [InlineKeyboardButton("üõçÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="start_order")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self._send_or_edit_message(update, message, reply_markup)
            
            # Send notification to administrators about new order
            if self.notification_service:
                try:
                    await self.notification_service.notify_new_order(order_info, user_id)
                except Exception as notify_error:
                    logger.error(f"Failed to send admin notification for order {order_id}: {notify_error}")
            
            # Clear session after successful order creation
            self.session_manager.clear_session(user_id)
            logger.info(f"Order creation completed and session cleared for user {user_id}")
            
        except APIClientError as e:
            logger.error(f"API error creating order for user {user_id}: {e}")
            await self._handle_order_creation_error(update, context, e)
        except Exception as e:
            logger.error(f"Unexpected error creating order for user {user_id}: {e}")
            await self._handle_order_creation_error(update, context, e)
            
        except APIClientError as e:
            await BotErrorHandler.handle_api_error(update, context, e, "creating order")
        except Exception as e:
            logger.error(f"Unexpected error creating order: {e}")
            await BotErrorHandler.handle_api_error(update, context, e, "creating order")
    
    async def cancel_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel current order process"""
        user_id = update.effective_user.id
        
        # Clear session
        session_cleared = self.session_manager.clear_session(user_id)
        
        message = (
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        
        keyboard = [
            [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="start_order")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_or_edit_message(update, message, reply_markup)
        
        BotErrorHandler.log_user_action(user_id, "order_cancelled")
    
    # Navigation handlers
    async def back_to_services(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Go back to service selection"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        if session:
            session.step = OrderStep.SERVICE_SELECTION
        await self.show_service_selection(update, context)
    
    async def back_to_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Go back to contact info"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        if session:
            session.step = OrderStep.CONTACT_INFO
        await self.show_contact_info_collection(update, context)
    
    async def back_to_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Go back to file upload"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        if session:
            session.step = OrderStep.FILE_UPLOAD
        await self.show_file_upload_step(update, context)
    
    async def back_to_specs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Go back to specifications"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        if session:
            session.step = OrderStep.SPECIFICATIONS
        await self.show_specifications_step(update, context)
    
    async def back_to_delivery(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Go back to delivery options"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        if session:
            session.step = OrderStep.DELIVERY
        await self.show_delivery_step(update, context)
    
    async def back_to_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Go back to confirmation"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        if session:
            session.step = OrderStep.CONFIRMATION
        await self.show_confirmation_step(update, context)
    
    async def remove_last_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Remove the last uploaded file"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        
        if not session or not session.files:
            await update.callback_query.message.reply_text(
                "‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
            )
            return
        
        # Remove last file
        removed_file = session.files.pop()
        
        message = (
            f"üóëÔ∏è –§–∞–π–ª **{removed_file.get('filename', '—Ñ–∞–π–ª')}** —É–¥–∞–ª–µ–Ω.\n\n"
            f"üìÅ –û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤: {len(session.files)}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ."
        )
        
        keyboard = []
        if session.files:
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è —Ñ–∞–π–ª–∞–º–∏", callback_data="order_continue_with_files")])
        
        keyboard.extend([
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª", callback_data="order_remove_last_file")] if session.files else [],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º", callback_data="order_back_to_contacts")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")]
        ])
        
        # Remove empty lists
        keyboard = [row for row in keyboard if row]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._send_or_edit_message(update, message, reply_markup)
    
    async def back_to_material(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Go back to material selection"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        if session:
            # Clear quality and infill selections
            session.specifications.pop("quality", None)
            session.specifications.pop("infill", None)
        await self.show_specifications_step(update, context)
    
    async def back_to_quality(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Go back to quality selection"""
        user_id = update.effective_user.id
        session = self.session_manager.get_session(user_id)
        if session and session.specifications.get("material"):
            # Clear infill selection but keep material
            session.specifications.pop("infill", None)
            await self.handle_material_selection(update, context, session.specifications["material"])
        else:
            await self.show_specifications_step(update, context)
    
    # Utility methods
    def _validate_name(self, name: str) -> bool:
        """Validate customer name"""
        if not name or len(name.strip()) < 2:
            return False
        if len(name.strip()) > 50:
            return False
        # Allow letters, spaces, hyphens, apostrophes
        return bool(re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-']+$", name.strip()))
    
    def _validate_email(self, email: str) -> bool:
        """Validate email address"""
        if not email:
            return False
        # Basic email validation
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return bool(re.match(pattern, email.strip()))
    
    def _validate_phone(self, phone: str) -> bool:
        """Validate phone number"""
        if not phone:
            return True  # Phone is optional
        # Remove all non-digit characters except +
        cleaned = re.sub(r'[^\d+]', '', phone)
        # Check if it looks like a phone number
        return bool(re.match(r'^\+?[1-9]\d{6,14}$', cleaned))
    
    async def _send_or_edit_message(self, update: Update, text: str, reply_markup=None):
        """Send new message or edit existing one based on update type"""
        try:
            if update.callback_query:
                # Edit existing message
                await update.callback_query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                # Send new message
                await update.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"Error sending/editing message: {e}")
            # Fallback: try to send as new message
            try:
                if update.effective_message:
                    await update.effective_message.reply_text(
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
            except Exception:
                pass  # Give up if both methods fail
    
    def _validate_order_data(self, session: OrderSession) -> Optional[str]:
        """
        Validate order data before sending to API
        
        Args:
            session: Order session to validate
            
        Returns:
            Error message if validation fails, None if valid
        """
        # Check required fields
        if not session.customer_name or len(session.customer_name.strip()) < 2:
            return "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
        
        if not session.customer_email or not self._validate_email(session.customer_email):
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å"
        
        if not session.service_id:
            return "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞"
        
        if not session.files:
            return "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª"
        
        # Validate phone if provided
        if session.customer_phone and not self._validate_phone(session.customer_phone):
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        
        # Validate specifications
        if not session.specifications:
            return "–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∞—Ç–∏"
        
        required_specs = ['material', 'quality', 'infill']
        for spec in required_specs:
            if spec not in session.specifications:
                return f"–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: {spec}"
        
        # Validate delivery info
        if session.delivery_needed is None:
            return "–ù–µ –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"
        
        if session.delivery_needed and not session.delivery_details:
            return "–ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
        
        return None
    
    async def _handle_order_creation_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error: Exception):
        """
        Handle errors during order creation with user-friendly messages
        
        Args:
            update: Telegram update object
            context: Bot context
            error: The exception that occurred
        """
        user_id = update.effective_user.id
        
        # Determine user-friendly error message
        if isinstance(error, APIClientError):
            if error.status_code == 400:
                user_message = (
                    "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            elif error.status_code == 422:
                user_message = (
                    "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            elif error.status_code >= 500:
                user_message = (
                    "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
            else:
                user_message = (
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        else:
            user_message = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # Add retry options
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="order_confirm")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="order_edit_menu")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await self._send_or_edit_message(update, user_message, reply_markup)
        except Exception as send_error:
            logger.error(f"Failed to send order creation error message to user {user_id}: {send_error}")