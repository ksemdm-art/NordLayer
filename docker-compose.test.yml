# Docker Compose configuration for testing
# Use: docker-compose -f docker-compose.yml -f docker-compose.test.yml up

services:
  # Test database
  postgres-test:
    image: postgres:15
    environment:
      POSTGRES_DB: printing_platform_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Test Redis
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend tests
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-test:5432/printing_platform_test
      - REDIS_URL=redis://redis-test:6379
      - ENVIRONMENT=test
      - DEBUG=false
      - SECRET_KEY=test-secret-key
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - test_uploads:/app/uploads
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Running tests...' &&
        pytest -v --cov=app --cov-report=html --cov-report=term-missing
      "

  # Frontend tests
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=test
      - VITE_API_URL=http://backend-test:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: >
      sh -c "
        echo 'Running frontend tests...' &&
        npm run test:unit &&
        echo 'Running E2E tests...' &&
        npm run test:e2e
      "

  # Telegram bot tests
  telegram-bot-test:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    environment:
      - TELEGRAM_BOT_TOKEN=test-token
      - API_BASE_URL=http://backend-test:8000
      - ENVIRONMENT=test
      - DEBUG=false
    volumes:
      - ./telegram-bot:/app
    command: >
      sh -c "
        echo 'Running telegram bot tests...' &&
        pytest -v --cov=. --cov-report=html --cov-report=term-missing
      "

volumes:
  postgres_test_data:
  test_uploads: