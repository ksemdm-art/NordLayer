name: Deploy to Production (Advanced)

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend, telegram-bot]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to server
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd /opt/printing-platform
          
          # Backup current deployment
          sudo docker-compose -f docker-compose.prod.yml down
          sudo cp -r . ../printing-platform-backup-$(date +%Y%m%d-%H%M%S)
          
          # Pull latest changes
          git pull origin main
          
          # Update images
          sudo docker-compose -f docker-compose.prod.yml pull
          
          # Start services
          sudo docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          sleep 30
          
          # Run health checks
          curl -f http://localhost/health || exit 1
          
          echo "Deployment completed successfully!"
        EOF
    
    - name: Run smoke tests
      run: |
        sleep 60  # Wait for services to fully start
        curl -f https://${{ secrets.DOMAIN_NAME }}/health
        curl -f https://${{ secrets.DOMAIN_NAME }}/api/health
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Deployment to production successful!"
        # Здесь можно добавить уведомления в Slack/Telegram
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Deployment to production failed!"
        # Здесь можно добавить уведомления об ошибке