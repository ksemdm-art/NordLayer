name: Deploy to Production (Disabled)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Test SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"
    
    - name: Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
          sudo mkdir -p /opt/printing-platform
          sudo chown deploy:deploy /opt/printing-platform
          cd /opt/printing-platform
          
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
          if [ -d ".git" ]; then
            echo "üì• Updating existing repository..."
            git fetch origin
            git reset --hard origin/main
            git pull origin main
          else
            echo "üì• Cloning repository..."
            git clone https://github.com/ksemdm-art/NordLayer.git .
          fi
          
          # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          echo "‚öôÔ∏è Setting up environment..."
          cp .env.production .env
          
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
          SECRET_KEY=$(openssl rand -hex 32)
          DB_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
          
          # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
          sed -i "s/CHANGE_THIS_TO_SECURE_RANDOM_STRING_64_CHARS_LONG_PLEASE/$SECRET_KEY/" .env
          sed -i "s/CHANGE_THIS_TO_SECURE_PASSWORD/$DB_PASSWORD/" .env
          
          echo "üõë Stopping old containers..."
          sudo docker-compose -f docker-compose.prod.yml down || true
          
          echo "üê≥ Building and starting new containers..."
          sudo docker-compose -f docker-compose.prod.yml up -d --build
          
          echo "‚è≥ Waiting for services to start..."
          sleep 45
          
          echo "üìä Checking container status..."
          sudo docker-compose -f docker-compose.prod.yml ps
          
          echo "‚úÖ Deployment completed successfully!"
        ENDSSH
    
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        sleep 30
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          "sudo docker-compose -f /opt/printing-platform/docker-compose.prod.yml ps --filter 'status=running' --quiet | wc -l" > running_containers.txt
        
        RUNNING=$(cat running_containers.txt)
        echo "Running containers: $RUNNING"
        
        if [ "$RUNNING" -gt "0" ]; then
          echo "‚úÖ Deployment verification successful!"
        else
          echo "‚ùå Deployment verification failed!"
          exit 1
        fi
    
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa
        rm -f running_containers.txt